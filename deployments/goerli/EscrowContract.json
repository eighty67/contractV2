{
  "address": "0xD06C60Dc0418EeD3A1c167A79F79bEe0C0D5878F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RefundsClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RefundsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiaryWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "refundee",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "depositsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRefunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum EscrowContract.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x24d528a99c45461a87e0edbb49d621176a7c94d4b08cf5cdd74f9b903d31f8be",
  "receipt": {
    "to": null,
    "from": "0x9aca4e2134CD56b7133f0844303a96835a5B8E55",
    "contractAddress": "0xD06C60Dc0418EeD3A1c167A79F79bEe0C0D5878F",
    "transactionIndex": 50,
    "gasUsed": "1147371",
    "logsBloom": "0x
    "blockHash": "0x760b8526e78aafee22a780de584ec67a2c7f9d20e51c1accbd1ab83bb4cb95af",
    "transactionHash": "0x24d528a99c45461a87e0edbb49d621176a7c94d4b08cf5cdd74f9b903d31f8be",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 7712494,
        "transactionHash": "0x24d528a99c45461a87e0edbb49d621176a7c94d4b08cf5cdd74f9b903d31f8be",
        "address": "0xD06C60Dc0418EeD3A1c167A79F79bEe0C0D5878F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009aca4e2134cd56b7133f0844303a96835a5b8e55"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x760b8526e78aafee22a780de584ec67a2c7f9d20e51c1accbd1ab83bb4cb95af"
      }
    ],
    "blockNumber": 7712494,
    "cumulativeGasUsed": "12152611",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD8E752BB6Fc4BEEB2E820D9409d76FD30df41dFe"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b952fffba42bb3f847c7170c8410d96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum EscrowContract.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Escrow that holds funds for a beneficiary, deposited from multiple parties.Intended usage: See {Escrow}. Same usage guidelines apply here.The owner account (that is, the contract that instantiates this contract) may deposit, close the deposit period, and allow for either withdrawal by the beneficiary, or refunds to the depositors. All interactions with `RefundEscrow` will be made through the owner contract.\",\"kind\":\"dev\",\"methods\":{\"beneficiary()\":{\"returns\":{\"_0\":\"The beneficiary of the escrow.\"}},\"beneficiaryWithdraw()\":{\"details\":\"Withdraws the beneficiary's funds.\"},\"close()\":{\"details\":\"Allows for the beneficiary to withdraw their funds, rejecting further deposits.\"},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"beneficiary_\":\"The beneficiary of the deposits.\"}},\"deposit(address)\":{\"details\":\"Stores funds that may later be refunded.\",\"params\":{\"refundee\":\"The address funds will be sent to if a refund occurs.\"}},\"enableRefunds()\":{\"details\":\"Allows for refunds to take place, rejecting further deposits.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"state()\":{\"returns\":{\"_0\":\"The current state of the escrow.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"The address whose funds will be withdrawn and transferred to. Emits a {Withdrawn} event.\"}},\"withdrawalAllowed(address)\":{\"details\":\"Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a 'payee' argument, but we ignore it here since the condition is global, not per-payee.\"}},\"title\":\"RefundEscrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EscrowContract.sol\":\"EscrowContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/escrow/ConditionalEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/ConditionalEscrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Escrow.sol\\\";\\n\\n/**\\n * @title ConditionalEscrow\\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\\n */\\nabstract contract ConditionalEscrow is Escrow {\\n    /**\\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\\n     * implemented by derived contracts.\\n     * @param payee The destination address of the funds.\\n     */\\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\\n\\n    function withdraw(address payable payee) public virtual override {\\n        require(withdrawalAllowed(payee), \\\"ConditionalEscrow: payee is not allowed to withdraw\\\");\\n        super.withdraw(payee);\\n    }\\n}\\n\",\"keccak256\":\"0xf71d228abc2df1a5020ba208b237718e22cad6b3532f5e8f1021f4f15068e290\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     *\\n     * Emits a {Deposited} event.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     *\\n     * Emits a {Withdrawn} event.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\",\"keccak256\":\"0xabdff382f93edb8bd94b227798fc0daf64abe891403e1e525f5870c2cae8bf65\",\"license\":\"MIT\"},\"contracts/EscrowContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/escrow/ConditionalEscrow.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RefundEscrow\\r\\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\\r\\n * parties.\\r\\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\\r\\n * @dev The owner account (that is, the contract that instantiates this\\r\\n * contract) may deposit, close the deposit period, and allow for either\\r\\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\\r\\n * with `RefundEscrow` will be made through the owner contract.\\r\\n */\\r\\ncontract EscrowContract is ConditionalEscrow {\\r\\n    using Address for address payable;\\r\\n\\r\\n    enum State {\\r\\n        Active,\\r\\n        Refunding,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    event RefundsClosed();\\r\\n    event RefundsEnabled();\\r\\n\\r\\n    State private _state;\\r\\n    address payable private immutable _beneficiary;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor.\\r\\n     * @param beneficiary_ The beneficiary of the deposits.\\r\\n     */\\r\\n    constructor(address payable beneficiary_) {\\r\\n        require(beneficiary_ != address(0), \\\"RefundEscrow: beneficiary is the zero address\\\");\\r\\n        _beneficiary = beneficiary_;\\r\\n        _state = State.Active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The current state of the escrow.\\r\\n     */\\r\\n    function state() public view virtual returns (State) {\\r\\n        return _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The beneficiary of the escrow.\\r\\n     */\\r\\n    function beneficiary() public view virtual returns (address payable) {\\r\\n        return _beneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores funds that may later be refunded.\\r\\n     * @param refundee The address funds will be sent to if a refund occurs.\\r\\n     */\\r\\n    function deposit(address refundee) public payable virtual override {\\r\\n        require(state() == State.Active, \\\"RefundEscrow: can only deposit while active\\\");\\r\\n        super.deposit(refundee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\\r\\n     * further deposits.\\r\\n     */\\r\\n    function close() public virtual onlyOwner {\\r\\n        require(state() == State.Active, \\\"RefundEscrow: can only close while active\\\");\\r\\n        _state = State.Closed;\\r\\n        emit RefundsClosed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows for refunds to take place, rejecting further deposits.\\r\\n     */\\r\\n    function enableRefunds() public virtual onlyOwner {\\r\\n        require(state() == State.Active, \\\"RefundEscrow: can only enable refunds while active\\\");\\r\\n        _state = State.Refunding;\\r\\n        emit RefundsEnabled();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws the beneficiary's funds.\\r\\n     */\\r\\n    function beneficiaryWithdraw() public virtual {\\r\\n        require(\\r\\n            state() == State.Closed,\\r\\n            \\\"RefundEscrow: beneficiary can only withdraw while closed\\\"\\r\\n        );\\r\\n        beneficiary().sendValue(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\\r\\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\\r\\n     */\\r\\n    function withdrawalAllowed(address) public view override returns (bool) {\\r\\n        return state() == State.Refunding;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xffb6f63a747fb8b67c472a580cb05a202c82f6230a8b2d70496c7290c653a4ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620016c3380380620016c383398181016040528101906200003791906200026c565b620000576200004b6200013660201b60201c565b6200013e60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000325565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250506000600260006101000a81548160ff021916908360028111156200012a576200012962000347565b5b02179055505062000376565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002348262000207565b9050919050565b620002468162000227565b81146200025257600080fd5b50565b60008151905062000266816200023b565b92915050565b60006020828403121562000285576200028462000202565b5b6000620002958482850162000255565b91505092915050565b600082825260208201905092915050565b7f526566756e64457363726f773a2062656e65666963696172792069732074686560008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b60006200030d602d836200029e565b91506200031a82620002af565b604082019050919050565b600060208201905081810360008301526200034081620002fe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c61132e620003956000396000610275015261132e6000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101825780639af6549a146101ad578063c19d93fb146101c4578063e3a9db1a146101ef578063f2fde38b1461022c578063f340fa0114610255576100a7565b806338af3eed146100ac57806343d726d6146100d757806351cff8d9146100ee578063685ca19414610117578063715018a6146101545780638c52dc411461016b575b600080fd5b3480156100b857600080fd5b506100c1610271565b6040516100ce9190610b3c565b60405180910390f35b3480156100e357600080fd5b506100ec610299565b005b3480156100fa57600080fd5b5061011560048036038101906101109190610b88565b610367565b005b34801561012357600080fd5b5061013e60048036038101906101399190610bf3565b6103bb565b60405161014b9190610c3b565b60405180910390f35b34801561016057600080fd5b506101696103f3565b005b34801561017757600080fd5b50610180610407565b005b34801561018e57600080fd5b506101976104d6565b6040516101a49190610c65565b60405180910390f35b3480156101b957600080fd5b506101c26104ff565b005b3480156101d057600080fd5b506101d961059e565b6040516101e69190610cf7565b60405180910390f35b3480156101fb57600080fd5b5061021660048036038101906102119190610bf3565b6105b5565b6040516102239190610d2b565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e9190610bf3565b6105fe565b005b61026f600480360381019061026a9190610bf3565b610682565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6102a16106fc565b600060028111156102b5576102b4610c80565b5b6102bd61059e565b60028111156102cf576102ce610c80565b5b1461030f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030690610dc9565b60405180910390fd5b60028060006101000a81548160ff0219169083600281111561033457610333610c80565b5b02179055507f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f60405160405180910390a1565b610370816103bb565b6103af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a690610e5b565b60405180910390fd5b6103b88161077a565b50565b6000600160028111156103d1576103d0610c80565b5b6103d961059e565b60028111156103eb576103ea610c80565b5b149050919050565b6103fb6106fc565b6104056000610886565b565b61040f6106fc565b6000600281111561042357610422610c80565b5b61042b61059e565b600281111561043d5761043c610c80565b5b1461047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610eed565b60405180910390fd5b6001600260006101000a81548160ff021916908360028111156104a3576104a2610c80565b5b02179055507f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60028081111561051257610511610c80565b5b61051a61059e565b600281111561052c5761052b610c80565b5b1461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610f7f565b60405180910390fd5b61059c47610578610271565b73ffffffffffffffffffffffffffffffffffffffff1661094a90919063ffffffff16565b565b6000600260009054906101000a900460ff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106066106fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066d90611011565b60405180910390fd5b61067f81610886565b50565b6000600281111561069657610695610c80565b5b61069e61059e565b60028111156106b0576106af610c80565b5b146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e7906110a3565b60405180910390fd5b6106f981610a3e565b50565b610704610af3565b73ffffffffffffffffffffffffffffffffffffffff166107226104d6565b73ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f9061110f565b60405180910390fd5b565b6107826106fc565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610834818373ffffffffffffffffffffffffffffffffffffffff1661094a90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161087a9190610d2b565b60405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8047101561098d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109849061117b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516109b3906111cc565b60006040518083038185875af1925050503d80600081146109f0576040519150601f19603f3d011682016040523d82523d6000602084013e6109f5565b606091505b5050905080610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090611253565b60405180910390fd5b505050565b610a466106fc565b600034905080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a9a91906112a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c482604051610ae79190610d2b565b60405180910390a25050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2682610afb565b9050919050565b610b3681610b1b565b82525050565b6000602082019050610b516000830184610b2d565b92915050565b600080fd5b610b6581610b1b565b8114610b7057600080fd5b50565b600081359050610b8281610b5c565b92915050565b600060208284031215610b9e57610b9d610b57565b5b6000610bac84828501610b73565b91505092915050565b6000610bc082610afb565b9050919050565b610bd081610bb5565b8114610bdb57600080fd5b50565b600081359050610bed81610bc7565b92915050565b600060208284031215610c0957610c08610b57565b5b6000610c1784828501610bde565b91505092915050565b60008115159050919050565b610c3581610c20565b82525050565b6000602082019050610c506000830184610c2c565b92915050565b610c5f81610bb5565b82525050565b6000602082019050610c7a6000830184610c56565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610cc057610cbf610c80565b5b50565b6000819050610cd182610caf565b919050565b6000610ce182610cc3565b9050919050565b610cf181610cd6565b82525050565b6000602082019050610d0c6000830184610ce8565b92915050565b6000819050919050565b610d2581610d12565b82525050565b6000602082019050610d406000830184610d1c565b92915050565b600082825260208201905092915050565b7f526566756e64457363726f773a2063616e206f6e6c7920636c6f73652077686960008201527f6c65206163746976650000000000000000000000000000000000000000000000602082015250565b6000610db3602983610d46565b9150610dbe82610d57565b604082019050919050565b60006020820190508181036000830152610de281610da6565b9050919050565b7f436f6e646974696f6e616c457363726f773a207061796565206973206e6f742060008201527f616c6c6f77656420746f20776974686472617700000000000000000000000000602082015250565b6000610e45603383610d46565b9150610e5082610de9565b604082019050919050565b60006020820190508181036000830152610e7481610e38565b9050919050565b7f526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726560008201527f66756e6473207768696c65206163746976650000000000000000000000000000602082015250565b6000610ed7603283610d46565b9150610ee282610e7b565b604082019050919050565b60006020820190508181036000830152610f0681610eca565b9050919050565b7f526566756e64457363726f773a2062656e65666963696172792063616e206f6e60008201527f6c79207769746864726177207768696c6520636c6f7365640000000000000000602082015250565b6000610f69603883610d46565b9150610f7482610f0d565b604082019050919050565b60006020820190508181036000830152610f9881610f5c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ffb602683610d46565b915061100682610f9f565b604082019050919050565b6000602082019050818103600083015261102a81610fee565b9050919050565b7f526566756e64457363726f773a2063616e206f6e6c79206465706f736974207760008201527f68696c6520616374697665000000000000000000000000000000000000000000602082015250565b600061108d602b83610d46565b915061109882611031565b604082019050919050565b600060208201905081810360008301526110bc81611080565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110f9602083610d46565b9150611104826110c3565b602082019050919050565b60006020820190508181036000830152611128816110ec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611165601d83610d46565b91506111708261112f565b602082019050919050565b6000602082019050818103600083015261119481611158565b9050919050565b600081905092915050565b50565b60006111b660008361119b565b91506111c1826111a6565b600082019050919050565b60006111d7826111a9565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061123d603a83610d46565b9150611248826111e1565b604082019050919050565b6000602082019050818103600083015261126c81611230565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ad82610d12565b91506112b883610d12565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112ed576112ec611273565b5b82820190509291505056fea2646970667358221220460db564b65a25e10bf66f649a73fa6bd664a4c9f3abe9f027fa11b673844b3964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101825780639af6549a146101ad578063c19d93fb146101c4578063e3a9db1a146101ef578063f2fde38b1461022c578063f340fa0114610255576100a7565b806338af3eed146100ac57806343d726d6146100d757806351cff8d9146100ee578063685ca19414610117578063715018a6146101545780638c52dc411461016b575b600080fd5b3480156100b857600080fd5b506100c1610271565b6040516100ce9190610b3c565b60405180910390f35b3480156100e357600080fd5b506100ec610299565b005b3480156100fa57600080fd5b5061011560048036038101906101109190610b88565b610367565b005b34801561012357600080fd5b5061013e60048036038101906101399190610bf3565b6103bb565b60405161014b9190610c3b565b60405180910390f35b34801561016057600080fd5b506101696103f3565b005b34801561017757600080fd5b50610180610407565b005b34801561018e57600080fd5b506101976104d6565b6040516101a49190610c65565b60405180910390f35b3480156101b957600080fd5b506101c26104ff565b005b3480156101d057600080fd5b506101d961059e565b6040516101e69190610cf7565b60405180910390f35b3480156101fb57600080fd5b5061021660048036038101906102119190610bf3565b6105b5565b6040516102239190610d2b565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e9190610bf3565b6105fe565b005b61026f600480360381019061026a9190610bf3565b610682565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6102a16106fc565b600060028111156102b5576102b4610c80565b5b6102bd61059e565b60028111156102cf576102ce610c80565b5b1461030f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030690610dc9565b60405180910390fd5b60028060006101000a81548160ff0219169083600281111561033457610333610c80565b5b02179055507f088672c3a6e342f7cd94a65ba63b79df24a8973927b4d05d803c44bbf787d12f60405160405180910390a1565b610370816103bb565b6103af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a690610e5b565b60405180910390fd5b6103b88161077a565b50565b6000600160028111156103d1576103d0610c80565b5b6103d961059e565b60028111156103eb576103ea610c80565b5b149050919050565b6103fb6106fc565b6104056000610886565b565b61040f6106fc565b6000600281111561042357610422610c80565b5b61042b61059e565b600281111561043d5761043c610c80565b5b1461047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610eed565b60405180910390fd5b6001600260006101000a81548160ff021916908360028111156104a3576104a2610c80565b5b02179055507f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60028081111561051257610511610c80565b5b61051a61059e565b600281111561052c5761052b610c80565b5b1461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610f7f565b60405180910390fd5b61059c47610578610271565b73ffffffffffffffffffffffffffffffffffffffff1661094a90919063ffffffff16565b565b6000600260009054906101000a900460ff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106066106fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066d90611011565b60405180910390fd5b61067f81610886565b50565b6000600281111561069657610695610c80565b5b61069e61059e565b60028111156106b0576106af610c80565b5b146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e7906110a3565b60405180910390fd5b6106f981610a3e565b50565b610704610af3565b73ffffffffffffffffffffffffffffffffffffffff166107226104d6565b73ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f9061110f565b60405180910390fd5b565b6107826106fc565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610834818373ffffffffffffffffffffffffffffffffffffffff1661094a90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161087a9190610d2b565b60405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8047101561098d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109849061117b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516109b3906111cc565b60006040518083038185875af1925050503d80600081146109f0576040519150601f19603f3d011682016040523d82523d6000602084013e6109f5565b606091505b5050905080610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090611253565b60405180910390fd5b505050565b610a466106fc565b600034905080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a9a91906112a2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c482604051610ae79190610d2b565b60405180910390a25050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2682610afb565b9050919050565b610b3681610b1b565b82525050565b6000602082019050610b516000830184610b2d565b92915050565b600080fd5b610b6581610b1b565b8114610b7057600080fd5b50565b600081359050610b8281610b5c565b92915050565b600060208284031215610b9e57610b9d610b57565b5b6000610bac84828501610b73565b91505092915050565b6000610bc082610afb565b9050919050565b610bd081610bb5565b8114610bdb57600080fd5b50565b600081359050610bed81610bc7565b92915050565b600060208284031215610c0957610c08610b57565b5b6000610c1784828501610bde565b91505092915050565b60008115159050919050565b610c3581610c20565b82525050565b6000602082019050610c506000830184610c2c565b92915050565b610c5f81610bb5565b82525050565b6000602082019050610c7a6000830184610c56565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610cc057610cbf610c80565b5b50565b6000819050610cd182610caf565b919050565b6000610ce182610cc3565b9050919050565b610cf181610cd6565b82525050565b6000602082019050610d0c6000830184610ce8565b92915050565b6000819050919050565b610d2581610d12565b82525050565b6000602082019050610d406000830184610d1c565b92915050565b600082825260208201905092915050565b7f526566756e64457363726f773a2063616e206f6e6c7920636c6f73652077686960008201527f6c65206163746976650000000000000000000000000000000000000000000000602082015250565b6000610db3602983610d46565b9150610dbe82610d57565b604082019050919050565b60006020820190508181036000830152610de281610da6565b9050919050565b7f436f6e646974696f6e616c457363726f773a207061796565206973206e6f742060008201527f616c6c6f77656420746f20776974686472617700000000000000000000000000602082015250565b6000610e45603383610d46565b9150610e5082610de9565b604082019050919050565b60006020820190508181036000830152610e7481610e38565b9050919050565b7f526566756e64457363726f773a2063616e206f6e6c7920656e61626c6520726560008201527f66756e6473207768696c65206163746976650000000000000000000000000000602082015250565b6000610ed7603283610d46565b9150610ee282610e7b565b604082019050919050565b60006020820190508181036000830152610f0681610eca565b9050919050565b7f526566756e64457363726f773a2062656e65666963696172792063616e206f6e60008201527f6c79207769746864726177207768696c6520636c6f7365640000000000000000602082015250565b6000610f69603883610d46565b9150610f7482610f0d565b604082019050919050565b60006020820190508181036000830152610f9881610f5c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ffb602683610d46565b915061100682610f9f565b604082019050919050565b6000602082019050818103600083015261102a81610fee565b9050919050565b7f526566756e64457363726f773a2063616e206f6e6c79206465706f736974207760008201527f68696c6520616374697665000000000000000000000000000000000000000000602082015250565b600061108d602b83610d46565b915061109882611031565b604082019050919050565b600060208201905081810360008301526110bc81611080565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110f9602083610d46565b9150611104826110c3565b602082019050919050565b60006020820190508181036000830152611128816110ec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611165601d83610d46565b91506111708261112f565b602082019050919050565b6000602082019050818103600083015261119481611158565b9050919050565b600081905092915050565b50565b60006111b660008361119b565b91506111c1826111a6565b600082019050919050565b60006111d7826111a9565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061123d603a83610d46565b9150611248826111e1565b604082019050919050565b6000602082019050818103600083015261126c81611230565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ad82610d12565b91506112b883610d12565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112ed576112ec611273565b5b82820190509291505056fea2646970667358221220460db564b65a25e10bf66f649a73fa6bd664a4c9f3abe9f027fa11b673844b3964736f6c63430008080033",
  "devdoc": {
    "details": "Escrow that holds funds for a beneficiary, deposited from multiple parties.Intended usage: See {Escrow}. Same usage guidelines apply here.The owner account (that is, the contract that instantiates this contract) may deposit, close the deposit period, and allow for either withdrawal by the beneficiary, or refunds to the depositors. All interactions with `RefundEscrow` will be made through the owner contract.",
    "kind": "dev",
    "methods": {
      "beneficiary()": {
        "returns": {
          "_0": "The beneficiary of the escrow."
        }
      },
      "beneficiaryWithdraw()": {
        "details": "Withdraws the beneficiary's funds."
      },
      "close()": {
        "details": "Allows for the beneficiary to withdraw their funds, rejecting further deposits."
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "beneficiary_": "The beneficiary of the deposits."
        }
      },
      "deposit(address)": {
        "details": "Stores funds that may later be refunded.",
        "params": {
          "refundee": "The address funds will be sent to if a refund occurs."
        }
      },
      "enableRefunds()": {
        "details": "Allows for refunds to take place, rejecting further deposits."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "state()": {
        "returns": {
          "_0": "The current state of the escrow."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw accumulated balance for a payee, forwarding all gas to the recipient. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "The address whose funds will be withdrawn and transferred to. Emits a {Withdrawn} event."
        }
      },
      "withdrawalAllowed(address)": {
        "details": "Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a 'payee' argument, but we ignore it here since the condition is global, not per-payee."
      }
    },
    "title": "RefundEscrow",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 490,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "_deposits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 580,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "_state",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(State)573"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(State)573": {
        "encoding": "inplace",
        "label": "enum EscrowContract.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}